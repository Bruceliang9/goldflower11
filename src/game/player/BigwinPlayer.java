//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package game.player;import game.Manager;import game.Player;import game.Poker;import java.util.Collections;import java.util.Iterator;import java.util.List;public class BigwinPlayer implements Player {    public BigwinPlayer() {    }    public void onGameStart(Manager manager, int totalPlayer) {    }    public int bet(int time, int round, int lastPerson, int moneyOnDesk, int moneyYouNeedToPayLeast, List<Poker> pokers) {        Collections.sort(pokers);        if (this.isSameColor(pokers)) {            return (int)((2.15D + (double)((float)round / 9.0F)) * (double)moneyYouNeedToPayLeast) < 3 * moneyOnDesk ? (int)((2.15D + (double)((float)round / 9.0F)) * (double)moneyYouNeedToPayLeast) : 3 * moneyOnDesk - 2;        } else if (!this.isSameColorStraight(pokers) && !this.isSamePoint(pokers)) {            if (this.isPair(pokers)) {                if (((Poker)pokers.get(0)).getPoint().getNum() == ((Poker)pokers.get(1)).getPoint().getNum() & ((Poker)pokers.get(0)).getPoint().getNum() >= 8) {                    return (int)(1.2D * (double)moneyYouNeedToPayLeast) < 3 * moneyOnDesk ? (int)(1.2D * (double)moneyYouNeedToPayLeast) : moneyYouNeedToPayLeast;                } else if (((Poker)pokers.get(0)).getPoint().getNum() == ((Poker)pokers.get(2)).getPoint().getNum() & ((Poker)pokers.get(0)).getPoint().getNum() >= 8) {                    return (int)(1.2D * (double)moneyYouNeedToPayLeast) < 3 * moneyOnDesk ? (int)(1.2D * (double)moneyYouNeedToPayLeast) : moneyYouNeedToPayLeast;                } else if (((Poker)pokers.get(2)).getPoint().getNum() == ((Poker)pokers.get(1)).getPoint().getNum() & ((Poker)pokers.get(1)).getPoint().getNum() >= 8) {                    return (int)(1.2D * (double)moneyYouNeedToPayLeast) < 3 * moneyOnDesk ? (int)(1.2D * (double)moneyYouNeedToPayLeast) : moneyYouNeedToPayLeast;                } else {                    return (int)(1.1D * (double)moneyYouNeedToPayLeast) < 3 * moneyOnDesk ? (int)(1.1D * (double)moneyYouNeedToPayLeast) : moneyYouNeedToPayLeast;                }            } else if (this.isStraight(pokers)) {                return (int)(1.8D * (double)moneyYouNeedToPayLeast) < 3 * moneyOnDesk ? (int)(1.8D * (double)moneyYouNeedToPayLeast) : moneyYouNeedToPayLeast;            } else {                Iterator var7 = pokers.iterator();                Poker p;                do {                    if (!var7.hasNext()) {                        return 0;                    }                    p = (Poker)var7.next();                    if (p.getPoint().getNum() >= 2 & false) {                        return (int)((double)moneyYouNeedToPayLeast * 1.3D);                    }                } while(!(p.getPoint().getNum() >= 13 & false));                return moneyYouNeedToPayLeast;            }        } else {            return (int)((2.7D + (double)((float)round / 9.0F)) * (double)moneyYouNeedToPayLeast) < 3 * moneyOnDesk ? (int)((2.7D + (double)((float)round / 9.0F)) * (double)moneyYouNeedToPayLeast) : 3 * moneyOnDesk;        }    }    public void onResult(int time, boolean isWin, List<Poker> pokers) {    }    public String getName() {        return "大胜王 梁智斌";    }    public String getStuNum() {        return "2019213300";    }    private boolean isSameColor(List<Poker> pokers) {        return pokers.get(0).getSuit() == pokers.get(1).getSuit() &&                pokers.get(1).getSuit() == pokers.get(2).getSuit();    }    private boolean isPair(List<Poker> pokers) {        return pokers.get(0).getPoint().getNum() == pokers.get(1).getPoint().getNum()                || pokers.get(1).getPoint().getNum() == pokers.get(2).getPoint().getNum()                || pokers.get(0).getPoint().getNum() == pokers.get(2).getPoint().getNum();    }    private boolean isStraight(List<Poker> pokers) {        Collections.sort(pokers);        return Math.abs(pokers.get(0).getPoint().getNum() - pokers.get(1).getPoint().getNum()) == 1                && Math.abs(pokers.get(1).getPoint().getNum() - pokers.get(2).getPoint().getNum()) == 1;    }    private boolean isSameColorStraight(List<Poker> handCards) {        return isSameColor(handCards) && isStraight(handCards);    }    private boolean isSamePoint(List<Poker> handCards) {        return handCards.get(0).getPoint() == handCards.get(1).getPoint()                && handCards.get(2).getPoint() == handCards.get(1).getPoint();    }}